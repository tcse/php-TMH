<div class="py-3">
    <!-- –ù–∞–∑–∞–¥ -->
    <a href="blog/" class="btn btn-outline-secondary btn-sm">‚Üê –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É</a>
</div>

<article itemscope itemtype="https://schema.org/BlogPosting">
    <header class="mb-4">
        <h1 itemprop="headline"><?= htmlspecialchars($title) ?></h1>
        <time datetime="<?= $post['date'] ?>" itemprop="datePublished" class="text-muted">
            <?= date('d.m.Y H:i', strtotime($post['date'])) ?>
        </time>
    </header>

    <!-- –ì–∞–ª–µ—Ä–µ—è –∏–ª–∏ —Ñ–æ—Ç–æ -->
    <?php if (!empty($post['photos'])): ?>
        <div class="swiper-container mb-4">
            <div class="swiper-wrapper">
                <?php foreach ($post['photos'] as $photo): ?>
                    <div class="swiper-slide">
                        <img src="core/blog_cover.php?file_id=<?= urlencode($photo['file_id']) ?>"
                             alt="–§–æ—Ç–æ" class="img-fluid rounded">
                    </div>
                <?php endforeach; ?>
            </div>
            <div class="swiper-pagination"></div>
            <div class="swiper-button-next"></div>
            <div class="swiper-button-prev"></div>
        </div>
    <?php elseif (!empty($post['photo_file_id'])): ?>
        <img src="core/blog_cover.php?file_id=<?= urlencode($post['photo_file_id']) ?>"
             alt="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" class="img-fluid rounded mb-4" itemprop="image">
    <?php endif; ?>

    <!-- –¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º -->
    <?php
// === –§—É–Ω–∫—Ü–∏—è: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å entities –∏ –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫ ===
function applyEntities($text, $entities) {
    if (empty($text)) return '';

    // –ï—Å–ª–∏ –Ω–µ—Ç entities ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω—ë–º —Ç–µ–∫—Å—Ç —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏
    if (empty($entities)) {
        return nl2br(htmlspecialchars($text));
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å –∫–æ–Ω—Ü–∞, —á—Ç–æ–±—ã –Ω–µ —Å–ª–æ–º–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏ –∑–∞–º–µ–Ω–µ
    usort($entities, function($a, $b) {
        return $b['offset'] - $a['offset'];
    });

    // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ (—Ç–µ–∫—Å—Ç + HTML)
    $fragments = [html_entity_decode($text)]; // –†–∞–±–æ—Ç–∞–µ–º —Å UTF-8 –Ω–∞–ø—Ä—è–º—É—é

    foreach ($entities as $entity) {
        $start = $entity['offset'];
        $len = $entity['length'];
        $end = $start + $len;

        if ($start < 0 || $end > strlen($text)) continue;

        $substr = substr($text, $start, $len);

        switch ($entity['type']) {
            case 'bold':
                $replacement = "<strong>" . htmlspecialchars($substr) . "</strong>";
                break;
            case 'italic':
                $replacement = "<em>" . htmlspecialchars($substr) . "</em>";
                break;
            case 'underline':
                $replacement = "<u>" . htmlspecialchars($substr) . "</u>";
                break;
            case 'strikethrough':
                $replacement = "<del>" . htmlspecialchars($substr) . "</del>";
                break;
            case 'code':
                $replacement = "<code>" . htmlspecialchars($substr) . "</code>";
                break;
            case 'pre':
                $language = isset($entity['language']) ? htmlspecialchars($entity['language']) : '';
                $replacement = "<pre><code class=\"language-$language\">" . htmlspecialchars($substr) . "</code></pre>";
                break;
            case 'text_link':
                $url = htmlspecialchars($entity['url']);
                $replacement = "<a href=\"$url\" target=\"_blank\" rel=\"noopener\">" . htmlspecialchars($substr) . "</a>";
                break;
            default:
                $replacement = htmlspecialchars($substr);
        }

        // –ó–∞–º–µ–Ω–∞ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
        $text = substr_replace($text, $replacement, $start, $len);
    }

    // –¢–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    return nl2br($text);
}

// === –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏ entities ===
$sourceText = $post['text'] ?? '';
if (empty($sourceText) && !empty($post['caption'])) {
    $sourceText = $post['caption'];
}

$entities = $post['entities'] ?? [];
if (empty($sourceText) && !empty($post['caption_entities'])) {
    $entities = $post['caption_entities'];
}

// === –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ===
$formattedText = applyEntities($sourceText, $entities);

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ YouTube-—Å—Å—ã–ª–æ–∫ ‚Üí iframe ===
$formattedText = preg_replace_callback(
    '/(https?:\/\/(?:www\.)?(youtube\.com\/watch\?v=|youtu\.be\/)([a-zA-Z0-9_-]{11}))/i',
    function ($matches) {
        $videoId = strlen($matches[3]) === 11 ? $matches[3] : $matches[4];
        $embedUrl = 'https://www.youtube.com/embed/' . $videoId;
        return <<<HTML
<div class="mb-4 youtube-video">
    <div style="position:relative;padding-top:56.25%;">
        <iframe 
            style="position:absolute;top:0;left:0;width:100%;height:100%;border-radius:12px;"
            src="$embedUrl" 
            title="YouTube video player" 
            frameborder="0" 
            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" 
            allowfullscreen>
        </iframe>
    </div>
</div>
HTML;
    },
    $formattedText
);

// === –•–µ—à—Ç–µ–≥–∏ –∏ @username (–ø–æ—Å–ª–µ YouTube!) ===
$formattedText = preg_replace_callback(
    '/(^|\s)(#[^\s#]+)(?=$|\s)/u',
    function ($matches) {
        $tag = ltrim($matches[2], '#');
        return $matches[1] . "<a href=\"blog/tag/{$tag}.html\" style=\"color:#1DB954;\">{$matches[2]}</a>";
    },
    $formattedText
);
$formattedText = preg_replace_callback(
    '/(^|\s)(@[^\s@]+)(?=$|\s)/u',
    function ($matches) {
        $username = ltrim($matches[2], '@');
        return $matches[1] . "<a href=\"https://t.me/{$username}\" target=\"_blank\" style=\"color:#1DB954;\">{$matches[2]}</a>";
    },
    $formattedText
);
?>
<div itemprop="articleBody" class="mb-4">
    <?= $formattedText ?>
</div>
    

    <!-- –ê—É–¥–∏–æ -->
    <?php if (!empty($post['audio']['file_id'])): 
        $audioTitle = $post['audio']['title'] ?? '';
        $firstLineOfTitle = explode("\n", $audioTitle)[0] ?? '–ê—É–¥–∏–æ–∑–∞–ø–∏—Å—å';
    ?>
        <div class="mb-4">
            <h4>üéß –ê—É–¥–∏–æ</h4>
            <p><strong><?= htmlspecialchars($post['audio']['performer'] ?? '') ?> ‚Äî <?= htmlspecialchars($firstLineOfTitle) ?></strong></p>
            <audio controls style="width:100%;" preload="metadata">
                <source src="core/stream.php?id=<?= urlencode($post['audio']['file_id']) ?>" type="audio/mpeg">
                –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞—É–¥–∏–æ.
            </audio>
        </div>
    <?php endif; ?>

    <!-- –í–∏–¥–µ–æ -->
    <?php if (!empty($post['video']['file_id'])): 
        $videoFileName = $post['video']['file_name'] ?? '–í–∏–¥–µ–æ.mp4';
        $proxyUrl = 'core/blog_cover.php?file_id=' . urlencode($post['video']['file_id']);
    ?>
        <div class="mb-4">
            <h4>üìπ –í–∏–¥–µ–æ</h4>
            <video controls style="width:100%; border-radius:8px;" poster="https://placehold.co/640x360/3498db/ffffff?text=VIDEO">
                <source src="<?= $proxyUrl ?>" type="video/mp4">
                –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ.
            </video>
            <p><small><a href="<?= $proxyUrl ?>" download="<?= urlencode($videoFileName) ?>">–°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ</a></small></p>
        </div>
    <?php endif; ?>

    <!-- –î–æ–∫—É–º–µ–Ω—Ç -->
    <?php if (!empty($post['document']['file_id'])): 
        $docFileName = $post['document']['file_name'] ?? '–î–æ–∫—É–º–µ–Ω—Ç';
        $proxyUrl = 'core/blog_cover.php?file_id=' . urlencode($post['document']['file_id']);
    ?>
        <div class="mb-4">
            <h4>üìé –î–æ–∫—É–º–µ–Ω—Ç</h4>
            <p>
                <i class="bi bi-file-earmark"></i>
                <a href="<?= $proxyUrl ?>" download="<?= urlencode($docFileName) ?>">
                    <?= htmlspecialchars($docFileName) ?>
                </a>
            </p>
        </div>
    <?php endif; ?>

    <!-- –°—Å—ã–ª–∫–∞ –Ω–∞ Telegram -->
    <a href="https://t.me/<?= $channel['channel_username'] ?>/<?= $post['id'] ?>" 
       class="btn btn-outline-primary mt-3" target="_blank" rel="noopener">
        –ü–µ—Ä–µ–π—Ç–∏ –≤ Telegram
    </a>
</article>